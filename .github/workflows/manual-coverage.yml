# Manual coverage workflow
# Generates an HTML and XML coverage report on demand

name: "Manual Coverage Report"

on:
  workflow_dispatch:
    inputs:
      python-version:
        description: "Python version to use"
        default: "3.12"
        required: false
      include-slow-tests:
        description: "Include tests marked as slow"
        type: boolean
        default: false
      upload-to-codecov:
        description: "Upload coverage report to Codecov"
        type: boolean
        default: true

permissions:
  contents: read

env:
  PIP_DISABLE_PIP_VERSION_CHECK: "1"
  QT_QPA_PLATFORM: offscreen
  XDG_RUNTIME_DIR: /tmp/qt-runtime

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref || github.run_id }}
  cancel-in-progress: true

jobs:
  coverage:
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Check out repository
        uses: actions/checkout@v5

      - name: Set up Python ${{ inputs.python-version }}
        uses: actions/setup-python@v6
        with:
          python-version: ${{ inputs.python-version }}
          cache: "pip"
          cache-dependency-path: "pyproject.toml"

      - name: Install system dependencies
        run: |
          set -o pipefail
          sudo DEBIAN_FRONTEND=noninteractive apt-get update
          sudo DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends python3-tk libgl1 libxkbcommon-x11-0
          sudo apt-get clean
          sudo rm -rf /var/lib/apt/lists/*
          sudo rm -rf /tmp/qt-runtime
          mkdir -p /tmp/qt-runtime
          chmod 700 /tmp/qt-runtime

      - name: Upgrade pip
        run: python -m pip install --upgrade pip

      - name: Install package with development dependencies
        run: python -m pip install -e '.[dev]'

      - name: Run tests with coverage
        env:
          INCLUDE_SLOW: ${{ inputs.include-slow-tests }}
        run: |
          set -o errexit
          set -o pipefail

          MARK_EXPR='not slow'
          if [ "${INCLUDE_SLOW}" = "true" ]; then
            MARK_EXPR=''
          fi

          python -m pytest tests/ -v \
            --cov=paper_games \
            --cov=card_games \
            --cov=common \
            --cov=dice_games \
            --cov=logic_games \
            --cov=word_games \
            --cov-report=xml \
            --cov-report=html \
            --cov-report=term-missing \
            ${MARK_EXPR:+-m "${MARK_EXPR}"}

      - name: Upload coverage to Codecov
        if: always() && inputs.upload-to-codecov == true
        uses: codecov/codecov-action@v5
        with:
          files: ./coverage.xml
          fail_ci_if_error: false
          verbose: true

      - name: Archive coverage HTML report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: manual-coverage-html
          path: htmlcov/
          retention-days: 14

      - name: Coverage summary
        if: always()
        run: |
          python <<'PY'
          from __future__ import annotations

          import xml.etree.ElementTree as ET
          import os
          from pathlib import Path

          summary_location = os.environ.get("GITHUB_STEP_SUMMARY")
          if summary_location is None:
            raise SystemExit("GITHUB_STEP_SUMMARY is not set")
          summary_path = Path(summary_location)
          coverage_xml = Path("coverage.xml")

          total_line_rate = 0.0
          total_branch_rate = 0.0
          packages = 0

          if coverage_xml.exists():
            root = ET.fromstring(coverage_xml.read_text())
            total_line_rate = float(root.attrib.get("line-rate", 0.0)) * 100
            total_branch_rate = float(root.attrib.get("branch-rate", 0.0)) * 100
            packages = len(root.findall("packages/package"))

          lines = [
              "## Manual Coverage Report",
              "",
              f"* **Line coverage:** {total_line_rate:.2f}%",
              f"* **Branch coverage:** {total_branch_rate:.2f}%",
              f"* **Packages measured:** {packages}",
              "",
              "Artifacts:",
              "* `manual-coverage-html` artifact contains the HTML coverage dashboard",
              "* `coverage.xml` uploaded to Codecov when enabled",
          ]
          existing = summary_path.read_text() if summary_path.exists() else ""
          content = "\n".join(lines)
          if existing:
            content = f"{existing.rstrip()}\n\n{content}"
          summary_path.write_text(f"{content}\n")
          PY
