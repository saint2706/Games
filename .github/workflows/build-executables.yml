# GitHub Actions workflow for building standalone executables
name: Build Executables

on:
  push:
    branches: [master, main]
    tags: ['v*']
  pull_request:
    branches: [master, main]
  release:
    types: [published]
  workflow_dispatch:

permissions:
  contents: write

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref || github.run_id }}
  cancel-in-progress: true

jobs:
  build-pyinstaller:
    name: Build with PyInstaller - ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.11']
      fail-fast: false
    timeout-minutes: 45

    steps:
      - name: Check out repository
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: ${{ matrix.python-version }}
          cache: pip
          cache-dependency-path: |
            pyproject.toml
            requirements-dev.txt
            requirements.txt

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip --retries 3 --timeout 30 || {
            echo "::warning::pip upgrade failed, continuing with current version";
            python -m pip --version;
          }
          python -m pip install -e '.[gui]' --retries 3 --timeout 60 || {
            echo "::error::Failed to install package dependencies";
            exit 1;
          }
          python -m pip install pyinstaller --retries 3 --timeout 30 || {
            echo "::error::Failed to install pyinstaller";
            exit 1;
          }

      - name: Build with PyInstaller
        run: |
          pyinstaller build_configs/pyinstaller/games.spec --clean || {
            echo "::error::PyInstaller build failed";
            echo "Build artifacts:";
            ls -la build/ 2>/dev/null || echo "No build directory";
            ls -la dist/ 2>/dev/null || echo "No dist directory";
            exit 1;
          }
          echo "✅ PyInstaller build completed"

      - name: Validate executable exists
        shell: bash
        run: |
          if [ "$RUNNER_OS" == "Windows" ]; then
            EXPECTED_FILE="dist/games-collection.exe"
          else
            EXPECTED_FILE="dist/games-collection"
          fi
          
          if [ ! -f "$EXPECTED_FILE" ]; then
            echo "ERROR: Expected executable not found: $EXPECTED_FILE"
            echo "Build may have failed or produced unexpected output."
            echo "Contents of dist/ directory:"
            ls -la dist/ || echo "dist/ directory does not exist"
            exit 1
          fi
          
          echo "✓ Executable validated: $EXPECTED_FILE"
          ls -lh "$EXPECTED_FILE"

      - name: Test executable (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          ./dist/games-collection --help || echo "No help flag yet"
          QT_QPA_PLATFORM=offscreen ./dist/games-collection --game dots_and_boxes --gui-framework pyqt5 --smoke-test
        continue-on-error: true

      - name: Test executable (Windows)
        if: runner.os == 'Windows'
        run: |
          .\dist\games-collection.exe --help || echo "No help flag yet"
          $Env:QT_QPA_PLATFORM = 'offscreen'
          .\dist\games-collection.exe --game dots_and_boxes --gui-framework pyqt5 --smoke-test
        continue-on-error: true

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: games-collection-pyinstaller-${{ matrix.os }}-py${{ matrix.python-version }}
          path: |
            dist/games-collection*
          retention-days: 30

  cross-platform-tests:
    name: Cross-Platform Tests - ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.10', '3.11', '3.12']
      fail-fast: false
    timeout-minutes: 40

    steps:
      - name: Check out repository
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: ${{ matrix.python-version }}
          cache: pip
          cache-dependency-path: |
            pyproject.toml
            requirements-dev.txt
            requirements.txt

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip --retries 3 --timeout 30 || {
            echo "::warning::pip upgrade failed, continuing with current version";
            python -m pip --version;
          }
          python -m pip install -e . --retries 3 --timeout 60 || {
            echo "::error::Failed to install package dependencies";
            exit 1;
          }

      - name: Test launcher import
        run: |
          python -c "from scripts.launcher import main; print('Launcher import successful')"

      - name: Test crash reporter import
        run: |
          python -c "from common.crash_reporter import CrashReporter; print('Crash reporter import successful')"

      - name: Test game imports (sample)
        run: |
          python -c "from card_games.war import WarGame; print('War game import successful')"
          python -c "from card_games.go_fish import GoFishGame; print('Go Fish game import successful')"
        continue-on-error: true

  build-pyscript:
    name: Build PyScript Bundle
    runs-on: ubuntu-latest
    needs: [cross-platform-tests]
    timeout-minutes: 20

    steps:
      - name: Check out repository
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: '3.11'
          cache: pip
          cache-dependency-path: |
            pyproject.toml
            requirements-dev.txt

      - name: Install build tooling
        run: |
          python -m pip install --upgrade pip --retries 3 --timeout 30 || {
            echo "::warning::pip upgrade failed";
          }
          python -m pip install build --retries 3 --timeout 60

      - name: Build PyScript bundle
        run: python scripts/build_pyscript_bundle.py

      - name: Upload PyScript artifact
        uses: actions/upload-artifact@v4
        with:
          name: games-collection-pyscript-bundle
          path: dist/web
          retention-days: 14

  docker-build:
    name: Build and Test Docker Image
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Check out repository
        uses: actions/checkout@v5

      - name: Build Docker image
        run: |
          # Try to build with retry logic in case of network issues
          for i in 1 2 3; do
            echo "Build attempt $i/3..."
            if docker build -t games-collection:test .; then
              echo "✅ Docker build successful"
              exit 0
            else
              echo "::warning::Docker build attempt $i failed"
              if [ $i -lt 3 ]; then
                echo "Retrying in 5 seconds..."
                sleep 5
              fi
            fi
          done
          echo "::error::Docker build failed after 3 attempts"
          exit 1

      - name: Test Docker image
        run: |
          docker run --rm games-collection:test python -c "import sys; print(f'Python {sys.version}')"

  create-release:
    name: Create Release
    needs: [build-pyinstaller, cross-platform-tests, docker-build, build-pyscript]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    timeout-minutes: 20

    steps:
      - name: Check out repository
        uses: actions/checkout@v5

      - name: Determine release tag
        id: release_tag
        run: echo "tag=${GITHUB_REF#refs/tags/}" >> "$GITHUB_OUTPUT"

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: List artifacts
        run: ls -lR artifacts/

      - name: Verify artifacts exist
        continue-on-error: false
        run: |
          echo "Checking for expected artifact directories..."
          missing_artifacts=0
          for os in ubuntu-latest windows-latest macos-latest; do
            artifact_dir="artifacts/games-collection-pyinstaller-${os}-py3.11"
            if [ ! -d "$artifact_dir" ]; then
              echo "::warning::Missing artifact directory: $artifact_dir"
              missing_artifacts=$((missing_artifacts + 1))
            else
              echo "✓ Found artifact directory: $artifact_dir"
            fi
          done
          
          if [ $missing_artifacts -gt 0 ]; then
            echo "::error::$missing_artifacts artifact(s) missing. Release cannot proceed."
            echo "Available artifacts:"
            ls -la artifacts/ || echo "No artifacts directory found"
            exit 1
          fi
          
          echo "✅ All expected artifacts are present!"

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.release_tag.outputs.tag }}
          name: Release ${{ steps.release_tag.outputs.tag }}
          files: artifacts/**/*
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
