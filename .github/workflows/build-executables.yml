# GitHub Actions workflow for building standalone executables
name: Build Executables

on:
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build-pyinstaller:
    name: Build with PyInstaller - ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.11']

    steps:
      - name: Check out repository
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[gui]"
          pip install pyinstaller

      - name: Build with PyInstaller
        run: |
          pyinstaller build_configs/pyinstaller/games.spec --clean

      - name: Test executable (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          ./dist/games-collection --help || echo "No help flag yet"
          QT_QPA_PLATFORM=offscreen ./dist/games-collection --game dots_and_boxes --gui-framework pyqt5 --smoke-test
        continue-on-error: true

      - name: Test executable (Windows)
        if: runner.os == 'Windows'
        run: |
          .\dist\games-collection.exe --help || echo "No help flag yet"
          $Env:QT_QPA_PLATFORM = 'offscreen'
          .\dist\games-collection.exe --game dots_and_boxes --gui-framework pyqt5 --smoke-test
        continue-on-error: true

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: games-collection-pyinstaller-${{ matrix.os }}-py${{ matrix.python-version }}
          path: |
            dist/games-collection*
          retention-days: 30

  cross-platform-tests:
    name: Cross-Platform Tests - ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.9', '3.10', '3.11', '3.12']
      fail-fast: false

    steps:
      - name: Check out repository
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .

      - name: Test launcher import
        run: |
          python -c "from scripts.launcher import main; print('Launcher import successful')"

      - name: Test crash reporter import
        run: |
          python -c "from common.crash_reporter import CrashReporter; print('Crash reporter import successful')"

      - name: Test game imports (sample)
        run: |
          python -c "from card_games.war import WarGame; print('War game import successful')"
          python -c "from card_games.go_fish import GoFishGame; print('Go Fish game import successful')"
        continue-on-error: true

  docker-build:
    name: Build and Test Docker Image
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v5

      - name: Build Docker image
        run: docker build -t games-collection:test .

      - name: Test Docker image
        run: |
          docker run --rm games-collection:test python -c "import sys; print(f'Python {sys.version}')"

  create-release:
    name: Create Release
    needs: [build-pyinstaller, cross-platform-tests, docker-build]
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v5

      - name: Determine release tag
        id: release_tag
        run: echo "tag=v${GITHUB_RUN_NUMBER}" >> "$GITHUB_OUTPUT"

      - name: Download all artifacts
        uses: actions/download-artifact@v5
        with:
          path: artifacts/

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.release_tag.outputs.tag }}
          name: Release ${{ steps.release_tag.outputs.tag }}
          files: artifacts/**/*
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
