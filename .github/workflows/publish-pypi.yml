# PyPI Publishing Workflow
# Publishes the package to PyPI when a release is created

name: Publish to PyPI

on:
  release:
    types: [published]
  # Allow manual triggering to bump version and create release
  workflow_dispatch:
    inputs:
      bump_part:
        description: 'Version part to bump (major, minor, patch)'
        required: false
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

permissions:
  contents: read

jobs:
  bump-and-release:
    name: Bump version and create release
    # Only run on manual workflow dispatch
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest

    permissions:
      contents: write  # Required to commit, push, create tags and releases

    steps:
      - name: Check out repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0  # Fetch all history for proper tagging
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: "3.12"

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Bump version
        id: bump
        run: |
          python scripts/bump_version.py --part ${{ github.event.inputs.bump_part || 'patch' }}
          NEW_VERSION=$(python -c "from scripts.bump_version import get_current_version; from pathlib import Path; print(get_current_version(Path('pyproject.toml')))")
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "tag=v$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Commit version bump
        run: |
          git add pyproject.toml scripts/__init__.py
          git commit -m "chore: bump version to ${{ steps.bump.outputs.version }}"
          git push

      - name: Create and push tag
        run: |
          git tag -a "${{ steps.bump.outputs.tag }}" -m "Release ${{ steps.bump.outputs.tag }}"
          git push origin "${{ steps.bump.outputs.tag }}"

      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create "${{ steps.bump.outputs.tag }}" \
            --title "${{ steps.bump.outputs.tag }}" \
            --notes "Release ${{ steps.bump.outputs.tag }}" \
            --draft=false \
            --prerelease=false

  build:
    name: Build distribution packages
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: "3.12"

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build

      - name: Build distribution packages
        run: python -m build

      - name: Smoke test built package
        shell: bash
        run: |
          set -euo pipefail
          python -m venv .venv-smoke
          source .venv-smoke/bin/activate
          python -m pip install --upgrade pip
          pip install dist/*.whl

          SMOKE_LOG=smoke-test.log
          {
            echo '### games-collection --help'
            games-collection --help
            echo
            echo '### python -m card_games.go_fish --gui-framework pyqt5 --help'
            python -m card_games.go_fish --gui-framework pyqt5 --help
          } 2>&1 | tee "$SMOKE_LOG"

          {
            echo '## Smoke test output'
            echo '```'
            cat "$SMOKE_LOG"
            echo '```'
          } >> "$GITHUB_STEP_SUMMARY"

      - name: Upload distribution packages
        uses: actions/upload-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

  publish-to-pypi:
    name: Publish to PyPI
    # Only publish on release events (not on workflow_dispatch)
    if: github.event_name == 'release' && github.event.action == 'published'
    needs: [build]
    runs-on: ubuntu-latest

    # GitHub Environment configuration required:
    # 1. Create 'pypi' environment in repository Settings > Environments
    # 2. Configure PyPI trusted publishing with this environment name
    # 3. No secrets needed - uses OIDC (id-token: write permission)
    environment:
      name: pypi
      url: https://pypi.org/p/games-collection

    permissions:
      id-token: write  # Required for PyPI trusted publishing (OIDC)

    steps:
      - name: Download distribution packages
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1

  github-release:
    name: Sign and upload to GitHub Release
    # Only run on release events, after successful PyPI publish
    if: github.event_name == 'release' && github.event.action == 'published'
    needs: [publish-to-pypi]
    runs-on: ubuntu-latest

    permissions:
      contents: write  # Required to upload release assets
      id-token: write  # Required for Sigstore signing

    steps:
      - name: Download distribution packages
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

      - name: Check for existing release assets
        id: check_assets
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          echo "Checking for existing assets in release ${{ github.ref_name }}..."
          
          # Get list of existing assets
          EXISTING_ASSETS=$(gh release view "${{ github.ref_name }}" \
            --repo "${{ github.repository }}" \
            --json assets \
            --jq '.assets[].name' || echo "")
          
          # Get list of files we want to upload
          cd dist
          NEW_FILES=$(ls -1)
          
          # Check for conflicts
          CONFLICTS=""
          for file in $NEW_FILES; do
            if echo "$EXISTING_ASSETS" | grep -q "^${file}$"; then
              CONFLICTS="$CONFLICTS\n- $file"
            fi
          done
          
          if [ -n "$CONFLICTS" ]; then
            echo "::error::The following assets already exist in release ${{ github.ref_name }}:$CONFLICTS"
            echo "::error::PyPI does not allow overwriting existing versions."
            echo "::error::To fix this:"
            echo "::error::  1. Delete the existing release and tag"
            echo "::error::  2. Bump the version to a new number"
            echo "::error::  3. Create a new release"
            exit 1
          fi
          
          echo "âœ“ No conflicting assets found. Safe to upload."

      - name: Sign the dists with Sigstore
        uses: sigstore/gh-action-sigstore-python@v3.0.1
        with:
          inputs: >-
            ./dist/*.tar.gz
            ./dist/*.whl

      - name: Upload artifact signatures to GitHub Release
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: >-
          gh release upload
          '${{ github.ref_name }}' dist/**
          --repo '${{ github.repository }}'
